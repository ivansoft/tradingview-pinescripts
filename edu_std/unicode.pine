// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © TradingView


//@version=5
indicator("Exploring Unicode", "", true)

// Exploring Unicode
// v2 2022.07.24

// This code was written using the recommendations from the Pine Script™ User Manual's Style Guide:
//   https://www.tradingview.com/pine-script-docs/en/v5/writing/Style_guide.html



// —————————— Part 1: Show large blocks of text/symbols using labels on hi/lo pivots.
// Labels are plotted in the past.
string txt  = ""
int    LEGS = 50
float  pHi1 = ta.pivothigh(LEGS, LEGS)
float  pLo1 = ta.pivotlow(LEGS,  LEGS)
if not na(pHi1)
    txt := "✦✪◎◉●○\n" 
    txt += "🚩📈📉🀈\n"
    txt += "𓆖𓀗𓁼𓅂𓋾𓃩𓈗\n"
    txt += "🕠🕤💰💲\n"
    txt += "⟳⟲↭⤼⥅\n"
    txt += "🚀🙈🚨🚦"
    label.new(bar_index - LEGS, pHi1, txt, style = label.style_none, textcolor = color.silver, textalign = text.align_left, size = size.huge)
    label.new(bar_index - LEGS / 2, high[LEGS / 2], "🟠\n🟡\n🟢", style = label.style_none, size = size.small)
else if not na(pLo1)
    // These variations were generated using https://lingojam.com/SpecialText
    txt := "I💙TV\n"
    txt += "𝐼💙𝒯𝒱\n"
    txt += "𝕀💙𝕋𝕍\n"
    txt += "Ｉ💙ＴＶ\n"
    txt += "🅸💙🆃🆅\n"
    txt += "Ⓘ💙ⓉⓋ\n"
    txt += "𝙄💙𝙏𝙑\n"
    label.new(bar_index - LEGS, pLo1, txt, color = color(na), style = label.style_label_up, textcolor = color.red, size = size.huge)


// —————————— Part 2: Show consecutively rising/falling bars with increasing volume using `plotchar()`.
// This page will be useful to find mirrored Unicode symbols: https://www.compart.com/en/unicode/mirrored
bool volumeRising = ta.rising(volume, 2)
bool bumpUp       = ta.rising(close,  2) and volumeRising
bool bumpDn       = ta.falling(close, 2) and volumeRising
plotchar(bumpUp, "bumpUp", "↗", location.abovebar, color.lime,    size = size.tiny)
plotchar(bumpDn, "bumpDn", "↘", location.belowbar, color.fuchsia, size = size.tiny)


// —————————— Part 3: Show bounces using `plotshape()`.

// @function            Returns true when a bounce up (so when `long` is `true`) occurs when `close` breaches the lowest `high` detected since the last change in `price`.
// @param price         (series float) When this value changes, it is used as the price from which bounce logic begins.
// @param long          (series bool) `true` when bouncing up for a long, `false` to bounce down for a short.  
// @returns             (float) `true` when a bounce from `price` is detected.    
bounceFrom(series float price, series bool long) =>
    var float level  = na
    var bool  bounce = false
    if price != price[1]
        level  := price
        bounce := false
    else
        bounce := not bounce and (long ? close > level : close < level)
        level  := bounce ? na : (long ? math.min(level, high) : math.max(level, low))
    bounce

// Pivot legs.
int LEFT_LEGS  = 20
int RIGHT_LEGS = 5
// To save value of the last pivot.
var float risingPivotHiPrice  = na
var float fallingPivotLoPrice = na
// Confirmation MA.
float ma = ta.alma(close, LEFT_LEGS * 4, 0.85, 6)
// New pivot detection.
float pHi2 = ta.pivothigh(LEFT_LEGS, RIGHT_LEGS)
float pLo2 = ta.pivotlow(LEFT_LEGS,  RIGHT_LEGS)
// Preliminary entry conditions from which we will detect a bounce.
bool long  = not na(pHi2) and ta.rising(ma,  RIGHT_LEGS)
bool short = not na(pLo2) and ta.falling(ma, RIGHT_LEGS)
// When an entry condition is found, save price at that point. Changes in this value launch a new iteration of the bounce detection logic.
if long
    risingPivotHiPrice  := pHi2
else if short
    fallingPivotLoPrice := pLo2
// Confirm our preliminary entry conditions by detecting a breach of the successive highs/lows since the last entry condition was `true`.
bool confirmedLong  = bounceFrom(risingPivotHiPrice,  true)
bool confirmedShort = bounceFrom(fallingPivotLoPrice, false)
plotshape(confirmedLong,  "confirmedLong",  location = location.belowbar, color = na, textcolor = color.green, text = "👆\n\nB\no\nu\nn\nc\ne")
plotshape(confirmedShort, "confirmedShort", location = location.abovebar, color = na, textcolor = color.red,   text = "B\no\nu\nn\nc\ne\n👇")
