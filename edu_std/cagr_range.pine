//@version=5
//@author=TradingView
indicator("CAGR Custom Range", "CAGR", overlay = true)

// Import our Pine library containing the `cagr()` function: https://www.tradingview.com/script/BICzyhq0-ta/
import TradingView/ta/1 as ta

color TVBLUE = #1848CC
color RED    = #C90707
int   MS_IN_ONE_DAY  = 24 * 60 * 60 * 1000
int   DEFAULT_POINT1 = timestamp("2021-09")
int   DEFAULT_POINT2 = timestamp("2021-10")

// These two time inputs with `confirm = true` launch the interactive input mode when adding the script to the chart.
int    entryTimeInput      = input.time(DEFAULT_POINT1, "Point 1", confirm = true)
int    exitTimeInput       = input.time(DEFAULT_POINT2, "Point 2", confirm = true, tooltip = "A minimum period of 1D is required between the two points.")

string comparedSymbolInput = input.symbol("",    "Compare to", tooltip = "If specified, the CAGR for this instrument will be compared to the one from the chart.")
color  lineBullColorInput  = input.color(TVBLUE, "Line colorsâ€ƒðŸ …", inline = "1")
color  lineBearColorInput  = input.color(RED,    "ðŸ ‡",    inline = "1")
int    lineWidthInput      = input.int(2,        "Width", inline = "1", minval = 1)

getPriceForTime(t)=>
    // @function Given a timestamp, returns the `close` price when that point in time is reached by the script.
    // @param t  A "series int" timestamp to search for.
    // @returns  The "series float" `close` value from the bar where `t` > the preceding bar's opening time, and <= the current bar's opening time.
    //           Returns `na` until such a point in time is found, and continues returning the `close` from the `t` point in time on subsequent bars.
    var float price = na
    if time[1] <= t and time >= t and na(price)
        price := close
    price

strRightOf(str, of) =>
    // @function  Extracts the part of `str` right of the last occurrence of the `of` string in `src`.
    // @param str A "series string" source string from which a substring will be extracted.
    // @param of  A "series string" containing the search string.
    // @returns   A "series string" containing the rightmost part of `src` after the last occurrence of the `of` string in `src`.
    string[] chars = str.split(str, "")
    int len = array.size(chars)
    int ofPos = array.lastindexof(chars, of)
    string[] substr = array.new_string(0)
    if ofPos >= 0 and ofPos < len - 1
        substr := array.slice(chars, ofPos + 1, len)
    string result = array.join(substr, "")

int   entryTime     = math.min(entryTimeInput, exitTimeInput)
int   exitTime      = math.max(entryTimeInput, exitTimeInput)
bool  comparison    = comparedSymbolInput != ""
float entryPrice    = getPriceForTime(entryTime)
float exitPrice     = getPriceForTime(exitTime)
bool  chartCAGRIsUp = exitPrice > entryPrice
float days          = (exitTime - entryTime) / MS_IN_ONE_DAY
float chartCAGR     = ta.cagr(entryTime, entryPrice, exitTime, exitPrice)
float comparedCAGR  = not comparison ? na : request.security(comparedSymbolInput, timeframe.period, chartCAGR)
bool  displayCAGR   = (na(chartCAGR[1]) and not na(chartCAGR) and (not comparison or not na(comparedCAGR))) or 
                      (na(comparedCAGR[1]) and not na(comparedCAGR) and not na(chartCAGR))
bool  priceIsHigh   = ta.percentrank(close, 100) > 50

if days < 1
    runtime.error("There must be a minimum of 24H between the two points.")
if displayCAGR
    // Display line and end points.
    color lineColor = chartCAGRIsUp ? lineBullColorInput : lineBearColorInput
    line.new(entryTime,  entryPrice, exitTime, exitPrice, xloc = xloc.bar_time, color = lineColor, style = line.style_dotted, width = lineWidthInput)
    label.new(entryTime, entryPrice, xloc = xloc.bar_time, color = lineColor, style = label.style_circle, size = size.tiny)
    label.new(exitTime,  exitPrice,  xloc = xloc.bar_time, color = lineColor, style = label.style_circle, size = size.tiny)
    
    // Display value label.
    color labelColor = if comparison
        chartCAGR > comparedCAGR ? lineBullColorInput : lineBearColorInput
    else
        chartCAGRIsUp ? lineBullColorInput : lineBearColorInput
    string labelYloc = priceIsHigh ? yloc.abovebar : yloc.belowbar
    string labelText = if comparison
        str.format("{0,number,###,###.#}â€Šâ€Š% {1} vs\n{2,number,###,###.#}â€Šâ€Š% {3}", chartCAGR, syminfo.ticker, comparedCAGR, strRightOf(comparedSymbolInput, ":"))
    else
        str.format("{0,number,###,###.#}â€Šâ€Š%", chartCAGR)
    label.new(exitTime, exitPrice, labelText, xloc = xloc.bar_time, yloc = labelYloc, style = label.style_label_center, color = labelColor, textcolor = color.white, size = size.large)
