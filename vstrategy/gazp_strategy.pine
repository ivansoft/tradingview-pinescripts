// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © ivansoft

//@version=6
strategy("GAZP Pivot Strategy", "gazp_strategy", overlay = true, max_labels_count = 500)

var int fractal = input.int(100, "fractal")
var float step1p = input.float(0.5, "step 1 %", inline = "01") / 100  // 0.5 %
var float step10p = input.float(5, "step 10 %", inline = "01") / 100  // 5 %
var bool bgfill = input.bool(true, "Backgroung Fill")

var divisor = array.from(
     0.0001, 0.0002, 0.0005,
     0.001, 0.002, 0.005,
     0.01, 0.02, 0.05,
     0.1, 0.2, 0.5,
     1, 2, 5,
     10, 20, 50,
     100, 200, 500,
     1000, 2000, 5000,
     10000, 20000, 50000)

debugLabelUp(txt,overlay=true,offset=0) =>
    label.new(bar_index+offset, high, txt, yloc = yloc.abovebar, style = label.style_arrowdown, force_overlay = overlay, textcolor = color.black)
debugLabelDn(txt,overlay=true,offset=0) =>
    label.new(bar_index+offset, low, txt, yloc = yloc.belowbar, style = label.style_arrowup, force_overlay = overlay, textcolor = color.black)

var displayMode = display.data_window + display.pane
var displayOverlayMode = display.pane

var allpvh = array.new<float>()
var allpvl = array.new<float>()

// fractal = 100
// step1 = 1.0
// step10 = 5.0

pvh = ta.pivothigh(fractal,fractal)
pvl = ta.pivotlow(fractal,fractal)

plotshape(pvh, "pivoth", shape.triangledown, location.abovebar, color.new(color.gray,50), -fractal, size = size.tiny)
plotshape(pvl, "pivotl", shape.triangleup, location.belowbar, color.new(color.gray,50), -fractal, size = size.tiny)

if not na(pvh)
    debugLabelUp(str.format("{0}",pvh),offset=-fractal)
if not na(pvl)
    debugLabelDn(str.format("{0}",pvl),offset=-fractal)

if not na(pvh)
    allpvh.push(pvh-int(pvh))
if not na(pvl)
    allpvl.push(pvl-int(pvl))

pvh_bars = ta.barssince(not na(pvh))+fractal
pvl_bars = ta.barssince(not na(pvl))+fractal

if barstate.islastconfirmedhistory
    // debugLabelUp(str.format( "h {2}\nl {1}\nm {0}",allpvh.median(),allpvh.min(),allpvh.max() ))
    // debugLabelDn(str.format( "m {0}\nl {1}\nh {2}",allpvl.median(),allpvl.min(),allpvl.max() ))
    // debugLabelDn(str.format("{0}\n{1}",pvh_bars,pvl_bars))
    na

th = ta.highest(fractal)
tl = ta.lowest(fractal)
// th_bars = ta.highestbars(fractal)
// tl_bars = ta.lowestbars(fractal)

// var float highest = 0
// var float lowest = 99999999999
// if th > highest
//     highest := th
// if tl < lowest 
//     lowest := tl

plot(th, "highest", style = plot.style_steplinebr, color = color.new(color.gray,50))
plot(tl, "lowest", style = plot.style_steplinebr, color = color.new(color.gray,50))

bullish = close > open
bearish = close < open

dividx1 = divisor.binary_search_rightmost(math.ceil(close * step1p))
step1 = divisor.get(dividx1)
dividx10 = divisor.binary_search_rightmost(math.ceil(close * step10p))
step10 = divisor.get(dividx10)

// highint1 = switch
//     bullish => step1 * math.ceil(high / step1)
//     bearish => step1 * math.ceil(high / step1)
//     => step1 * math.round(high / step1)
highint1 = step1 * math.ceil(high / step1)
lowint1 = step1 * math.floor(low / step1)
highint10 = step10 * math.round(high / step10)
lowint10 = step10 * math.round(low / step10)

// if lowint1 > high
//     lowint1 := lowint1[1]
// if highint1 < low
//     highint1 := highint1[1]

var lbllast_up = debugLabelUp("")
var lbllast_dn = debugLabelDn("")
if barstate.islast
    label.set_text(lbllast_up, str.format("{1}\n{0}",th,close))
    label.set_text(lbllast_dn, str.format("{0}\n{1}",tl,close))
    label.set_x(lbllast_up, highint1 > highint1[1] ? bar_index : bar_index-5000)
    label.set_x(lbllast_dn, lowint1 <= lowint1[1] ? bar_index : bar_index-5000)


// plot(highint10, color = color.new(color.blue,50), style = plot.style_steplinebr)
// plot(lowint10, color = color.new(color.blue,50), style = plot.style_steplinebr)
ph1 = plot(highint1, "high", color = color.new(color.green,50), style = plot.style_steplinebr, linewidth = 3, display = displayOverlayMode)
pl1 = plot(lowint1, "low", color = color.new(color.red,50), style = plot.style_steplinebr, linewidth = 2, display = displayOverlayMode)

fillcolor = switch
    not bgfill => na
    bullish => color.new(color.green,90)
    bearish => color.new(color.red,90)
    => color.new(color.gray,50)
fill(ph1, pl1, color = fillcolor)





