//@version=6
indicator("Volume Value", "value", format = format.volume, overlay = false)

var int inputBarsPercentile = input.int(2000, "Bars Percientile", inline = "00")  // (2000/272 =~ 7 days)
var int inputBarsCumulative = input.int(5, "Bars Cumulative", inline = "01")     // (10)
var float inputPercentileCumulative = input.float(99, "%", inline = "01")
var string inputPeriodCumulativeH = input.string("15", "HTF Cum% Period", inline = "02")  // ("30")
var int inputBarsCumulativeH = input.int(1, "Bars", inline = "02")
var bool inputDefaultAllInvert = input.bool(false, "Invert On/Off All Inputs", group = "Show/Hide")
var bool _inputShowValueLevels = input.bool(true, "Levels", group = "Show/Hide", inline = "0")
var bool _inputShowValueLevelP99 = input.bool(true, "P99", group = "Show/Hide", inline = "0")
var bool _inputShowValueLevelP100 = input.bool(true, "P100", group = "Show/Hide", inline = "0")
var bool _inputShowValueLevelP50 = input.bool(true, "P50", group = "Show/Hide", inline = "0")
var bool _inputShowCumulative = input.bool(true, "Cumulative", group = "Show/Hide", inline = "1")
var bool _inputShowCumulativeVolume = input.bool(true, "Volume", group = "Show/Hide", inline = "1")
var bool _inputShowCumulativeLevelP99 = input.bool(true, "P99", group = "Show/Hide", inline = "1")
var bool _inputShowVwap = input.bool(true, "VWAP", group = "Show/Hide", inline = "2")
var bool _inputShowVwapMain = input.bool(true, "Main", group = "Show/Hide", inline = "2")
var bool _inputShowVwapStdDev = input.bool(true, "StdDev", group = "Show/Hide", inline = "2")
var float inputVwapStdDevMult = input.float(2.0, title='Mult', display = display.none, group = "Show/Hide", inline = "2")
var bool _inputShowColoredBackground = input.bool(true, "Background Highlights", group = "Show/Hide")

var bool inputShowValueLevels = inputDefaultAllInvert ? not _inputShowValueLevels : _inputShowValueLevels
var bool inputShowValueLevelP99 = inputDefaultAllInvert ? not _inputShowValueLevelP99 : _inputShowValueLevelP99
var bool inputShowValueLevelP100 = inputDefaultAllInvert ? not _inputShowValueLevelP100 : _inputShowValueLevelP100
var bool inputShowValueLevelP50 = inputDefaultAllInvert ? not _inputShowValueLevelP50 : _inputShowValueLevelP50
var bool inputShowCumulative = inputDefaultAllInvert ? not _inputShowCumulative : _inputShowCumulative
var bool inputShowCumulativeVolume = inputDefaultAllInvert ? not _inputShowCumulativeVolume : _inputShowCumulativeVolume
var bool inputShowCumulativeLevelP99 = inputDefaultAllInvert ? not _inputShowCumulativeLevelP99 : _inputShowCumulativeLevelP99
var bool inputShowVwap = inputDefaultAllInvert ? not _inputShowVwap : _inputShowVwap
var bool inputShowVwapMain = inputDefaultAllInvert ? not _inputShowVwapMain : _inputShowVwapMain
var bool inputShowVwapStdDev = inputDefaultAllInvert ? not _inputShowVwapStdDev : _inputShowVwapStdDev
var bool inputShowColoredBackground = inputDefaultAllInvert ? not _inputShowColoredBackground : _inputShowColoredBackground

var bool isPlotP99 = inputShowValueLevels and inputShowValueLevelP99
var bool isPlotP100 = inputShowValueLevels and inputShowValueLevelP100
var bool isPlotP50 = inputShowValueLevels and inputShowValueLevelP50
var bool isPlotCumV = inputShowCumulative and inputShowCumulativeVolume
var bool isPlotCumP99 = inputShowCumulative and inputShowCumulativeLevelP99
var bool isPlotVwap = inputShowVwap and inputShowVwapMain
var bool isPlotStd = inputShowVwap and inputShowVwapStdDev

debugLabelUp(txt,overlay=true) =>
    label.new(bar_index, high, txt, yloc = yloc.abovebar, style = label.style_arrowdown, force_overlay = overlay, textcolor = color.black)
debugLabelDn(txt,overlay=true) =>
    label.new(bar_index, low, txt, yloc = yloc.belowbar, style = label.style_arrowup, force_overlay = overlay, textcolor = color.black)


var displayMode = display.data_window + display.pane
var displayOverlayMode = display.pane

// IRUS realtime bar Volume is 0
value = volume == 0.0 ? na : volume*hl2

p99 = ta.percentile_nearest_rank(value, inputBarsPercentile, 99)
p100 = ta.percentile_nearest_rank(value, inputBarsPercentile, 100)
p50 = ta.percentile_nearest_rank(value, inputBarsPercentile, 97)

isvalueP100 = value >= p100
isvalueP99 = value >= p99
isvalueP50 = value >= p50

colorplotvalue = switch
    isvalueP100 => color.new(color.purple, 50)
    isvalueP99 => color.new(color.blue, 50)
    isvalueP50 => color.new(color.gray, 50)
    => color.new(color.gray, 75)

plot(value, color=colorplotvalue, style=plot.style_columns, title="Value")
plot(isPlotP99 ? p99 : na, color=color.new(color.blue, 25), style=plot.style_line, title="p99v", display = displayMode, editable = false)
plot(isPlotP100 ? p100 : na, color=color.new(color.purple, 25), style=plot.style_line, title="p100v", display = displayMode, editable = false)
plot(isPlotP50 ? p50 : na, color=color.new(color.gray, 25), style=plot.style_line, title="p95v", display = displayMode, editable = false)

vcum = math.sum(value, inputBarsCumulative)
// vcumsma = vcum //ta.sma(vcum, 3)
// valuesma = value //ta.sma(value, 3)
// plot(vcumsma)
// plot(valuesma)
vcumrising = true //not ta.falling(vcumsma, 1)
valuerising = true //not ta.falling(valuesma, 1)
// vcumrising = switch
//     _vcumrising[1] and not _vcumrising[0] => true
//     not _vcumrising[1] and _vcumrising[0] => false
//     => _vcumrising

p99cum = request.security(syminfo.tickerid, inputPeriodCumulativeH, ta.percentile_nearest_rank(
     math.sum(value, inputBarsCumulativeH),
     inputBarsPercentile, inputPercentileCumulative
     ))

isvcumP99 = vcum >= p99cum //and vcumrising and valuerising

plot(isPlotCumV ? vcum : na, color=color.new(color.olive, 50), style=plot.style_line, title="cum", display = displayMode, editable = false)
plot(isPlotCumP99 ? p99cum : na, color=color.new(color.gray, 25), style=plot.style_line, title="p99cum", display = displayMode, editable = false)


const color NO_COLOR = color(na)
bgcolor = switch
    isvalueP100 => color.new(color.purple, 85)
    isvalueP99 => color.new(color.blue, 85)
    isvcumP99 => color.new(color.olive, 85)
    //vcum >= p100 => color.new(color.gray, 85)
    //vcum >= p99 => color.new(color.gray, 95)
    => NO_COLOR
bgcolor(inputShowColoredBackground ? bgcolor : na, editable = false)
bgcolor(inputShowColoredBackground ? bgcolor : na, editable = false, force_overlay = true)


oc2 = (open + close) / 2

//anchor = timeframe.change("1D")
[vwap, upper, lower] = ta.vwap(oc2, timeframe.change("D"), inputVwapStdDevMult) // anchor "1D" is default
plot(isPlotVwap ? vwap : na, display = displayOverlayMode, editable = false, force_overlay = true)
plot(isPlotStd ? upper : na, color = color.gray, display = displayOverlayMode, editable = false, force_overlay = true)
plot(isPlotStd ? lower : na, color = color.gray, display = displayOverlayMode, editable = false, force_overlay = true)

deltavwap = (close - vwap) / vwap
// deltavwap_pp = deltavwap * 100
// if deltavwap_pp <= -3 or 3 <= deltavwap_pp
//     debugLabelDn(str.format("{0,number,#.#}", deltavwap*100))
// else if -0.2 <= deltavwap_pp and deltavwap_pp <= 0.2
//     debugLabelDn(str.format("{0,number,#.#}", deltavwap*100))

// ALERTS

strPrice(v) =>
    var _strPriceScale = str.repeat("#",math.ceil(math.log10(syminfo.pricescale)))
    str.format("{0,number,"+"#."+_strPriceScale+"}",v)
strVolume(v) =>
    vm = v /    1000000
    vb = v / 1000000000
    //vm < 1000 ? str.format("{0,number,integer}M", vm) : str.format("{0,number,integer}B", vb)
    //str.format("{0,number,integer}M", vm)
    //vm > 1000 ? str.format("{0}B", vb) : str.format("{0}M", vb)
    str.format("{0}M", vb)
strPercent(v) =>
    str.format("{0,number,#.#}%", v*100)
strUpDn(v) => v > 0 ? "Up" : v < 0 ? "Dn" : "Flat"


varip triggrered = map.new<string,bool>()
if barstate.isnew
    triggrered.clear()
istrig(v) => triggrered.contains(v)
notrig(v) => not triggrered.contains(v)
trig(v) => triggrered.put(v,true)

if isvalueP100 and notrig("huge")
    alert(str.format( "{0} 3min Huge Volume {1} : {2}->{3} {4} {5} {6}", syminfo.ticker, strVolume(value), strPrice(close[1]), strPrice(close), strPercent(deltavwap), strUpDn(close-close[1]), istrig("big")?" SAME":"" ), alert.freq_all)
    trig("huge")
if isvalueP99 and notrig("big")
    alert(str.format( "{0} 3min Big Volume {1} : {2}->{3} {4} {5}", syminfo.ticker, strVolume(value), strPrice(close[1]), strPrice(close), strPercent(deltavwap), strUpDn(close-close[1]) ), alert.freq_all)
    trig("big")
if isvcumP99 and isvalueP50 and notrig("cum") and notrig("big") and notrig("huge")
    if isvcumP99[1]
        alert(str.format( "{0} Cumulative Volume {1} : {2}->{3} {4} {5} {6}", syminfo.ticker, strVolume(value), strPrice(close[1]), strPrice(close), strPercent(deltavwap), strUpDn(close-close[1]), "CONTINUE" ), alert.freq_all)
        trig("cum")
    else //new
        alert(str.format( "{0} Cumulative Volume {1} : {2}->{3} {4} {5} {6}", syminfo.ticker, strVolume(value), strPrice(close[1]), strPrice(close), strPercent(deltavwap), strUpDn(close-close[1]), "FIRST" ), alert.freq_all)
        trig("cum")


