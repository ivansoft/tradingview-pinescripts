//@version=6
indicator("Volume Value", "value", format = format.volume, overlay = false)

// value (5000, D, 5, 99.5, 15, 1, 97, 5000, 99.5, 3)

var int inputBarsPercentile = input.int(2000, "Percentile Bars", inline = "00")  // (2000/272 =~ 7 days, 5000/272 =~ 18)
var float inputPercentileP99 = input.float(99.5, "%", inline = "00")
var string inputVwapAnchor = input.string("D", "VWAP", inline = "00")
var int inputBarsCumulative = input.int(5, "Cumulative Bars", inline = "01")     // (10)
var float inputPercentileCumulative = input.float(99, "%", inline = "01")
var int inputBarsCumulativeH = input.int(1, "HTF Cumulative Bars", inline = "02")
var string inputPeriodCumulativeH = input.string("15", "TF", inline = "02")  // ("30")
var float inputPercentile50 = input.float(97, "Ignore Level P50", inline = "03")
// int inputPricespikeBarsPercentile = input.int(1500, "Spike Percentile", inline = "04")
// var float inputPricespikePercentileCumulative = input.float(99, "%", inline = "04")
// var int inputPricespikeBarsCumulative = input.int(3, "Bars", inline = "04")
var bool inputDefaultAllInvert = input.bool(false, "Invert On/Off All Inputs", group = "Show/Hide")
var bool _inputShowValueLevels = input.bool(true, "Levels", group = "Show/Hide", inline = "0")
var bool _inputShowValueLevelP99 = input.bool(true, "P99", group = "Show/Hide", inline = "0")
var bool _inputShowValueLevelP100 = input.bool(true, "P100", group = "Show/Hide", inline = "0")
var bool _inputShowValueLevelP50 = input.bool(true, "P50", group = "Show/Hide", inline = "0")
var bool _inputShowCumulative = input.bool(true, "Cumulative", group = "Show/Hide", inline = "1")
var bool _inputShowCumulativeVolume = input.bool(true, "Volume", group = "Show/Hide", inline = "1")
var bool _inputShowCumulativeLevelP99 = input.bool(true, "P99", group = "Show/Hide", inline = "1")
var bool _inputShowColoredBackground = input.bool(true, "Background Highlights", group = "Show/Hide")

var bool inputShowValueLevels = inputDefaultAllInvert ? not _inputShowValueLevels : _inputShowValueLevels
var bool inputShowValueLevelP99 = inputDefaultAllInvert ? not _inputShowValueLevelP99 : _inputShowValueLevelP99
var bool inputShowValueLevelP100 = inputDefaultAllInvert ? not _inputShowValueLevelP100 : _inputShowValueLevelP100
var bool inputShowValueLevelP50 = inputDefaultAllInvert ? not _inputShowValueLevelP50 : _inputShowValueLevelP50
var bool inputShowCumulative = inputDefaultAllInvert ? not _inputShowCumulative : _inputShowCumulative
var bool inputShowCumulativeVolume = inputDefaultAllInvert ? not _inputShowCumulativeVolume : _inputShowCumulativeVolume
var bool inputShowCumulativeLevelP99 = inputDefaultAllInvert ? not _inputShowCumulativeLevelP99 : _inputShowCumulativeLevelP99
var bool inputShowColoredBackground = inputDefaultAllInvert ? not _inputShowColoredBackground : _inputShowColoredBackground

var bool isPlotP99 = inputShowValueLevels and inputShowValueLevelP99
var bool isPlotP100 = inputShowValueLevels and inputShowValueLevelP100
var bool isPlotP50 = inputShowValueLevels and inputShowValueLevelP50
var bool isPlotCumV = inputShowCumulative and inputShowCumulativeVolume
var bool isPlotCumP99 = inputShowCumulative and inputShowCumulativeLevelP99

debugLabelUp(txt,overlay=true) =>
    label.new(bar_index, high, txt, yloc = yloc.abovebar, style = label.style_arrowdown, force_overlay = overlay, textcolor = color.black)
debugLabelDn(txt,overlay=true) =>
    label.new(bar_index, low, txt, yloc = yloc.belowbar, style = label.style_arrowup, force_overlay = overlay, textcolor = color.black)


var displayMode = display.data_window + display.pane
var displayOverlayMode = display.pane

// IRUS realtime bar Volume is 0
value = volume == 0.0 ? na : volume*hl2
vvalue = request.security(syminfo.tickerid, "3", value, lookahead = barmerge.lookahead_on)

// p99 = ta.percentile_nearest_rank(value, inputBarsPercentile, 99)
// p100 = ta.percentile_nearest_rank(value, inputBarsPercentile, 100)
// p50 = ta.percentile_nearest_rank(value, inputBarsPercentile, inputPercentile50)
[p99,p100,p50] = request.security(syminfo.tickerid, "3", [
     ta.percentile_nearest_rank(value, inputBarsPercentile, inputPercentileP99),
     ta.percentile_nearest_rank(value, inputBarsPercentile, 100),
     ta.percentile_nearest_rank(value, inputBarsPercentile, inputPercentile50)
     ], lookahead = barmerge.lookahead_on)

isvalueP100 = vvalue >= p100
isvalueP99 = vvalue >= p99
isvalueP50 = vvalue >= p50

colorplotvalue = switch
    isvalueP100 => color.new(color.purple, 50)
    isvalueP99 => color.new(color.blue, 50)
    isvalueP50 => color.new(color.gray, 50)
    => color.new(color.gray, 75)

plot(value, color=colorplotvalue, style=plot.style_columns, title="Value")
plot(isPlotP99 ? p99 : na, color=color.new(color.blue, 25), style=plot.style_line, title="p99v", display = displayMode, editable = false)
plot(isPlotP100 ? p100 : na, color=color.new(color.purple, 25), style=plot.style_line, title="p100v", display = displayMode, editable = false)
plot(isPlotP50 ? p50 : na, color=color.new(color.gray, 25), style=plot.style_line, title="p95v", display = displayMode, editable = false)

//vcum = math.sum(value, inputBarsCumulative)
vcum = request.security(syminfo.tickerid, "3",
     math.sum(value, inputBarsCumulative),
     lookahead = barmerge.lookahead_on)
// vcumsma = vcum //ta.sma(vcum, 3)
// valuesma = value //ta.sma(value, 3)
// plot(vcumsma)
// plot(valuesma)
vcumrising = true //not ta.falling(vcumsma, 1)
valuerising = true //not ta.falling(valuesma, 1)
// vcumrising = switch
//     _vcumrising[1] and not _vcumrising[0] => true
//     not _vcumrising[1] and _vcumrising[0] => false
//     => _vcumrising

p99cum = request.security(syminfo.tickerid, inputPeriodCumulativeH, ta.percentile_nearest_rank(
     math.sum(value, inputBarsCumulativeH),
     inputBarsPercentile, inputPercentileCumulative
     ), lookahead = barmerge.lookahead_on)

isvcumP99 = vcum >= p99cum //and vcumrising and valuerising

plot(isPlotCumV ? vcum : na, color=color.new(color.olive, 50), style=plot.style_line, title="cum", display = displayMode, editable = false)
plot(isPlotCumP99 ? p99cum : na, color=color.new(color.gray, 25), style=plot.style_line, title="p99cum", display = displayMode, editable = false)


bgcolorall = switch
    not inputShowColoredBackground => na
    isvalueP100 => color.new(color.purple, 85)
    isvalueP99 => color.new(color.blue, 85)
    isvcumP99 => color.new(color.olive, 85)
    //vcum >= p100 => color.new(color.gray, 85)
    //vcum >= p99 => color.new(color.gray, 95)
    => na
bgcolor(bgcolorall, editable = false)
bgcolor(bgcolorall, editable = false, force_overlay = true)


oc2 = (open + close) / 2

//anchor = timeframe.change("1D")
vwap = ta.vwap(oc2, timeframe.change(inputVwapAnchor))
// [vwap, upper, lower] = ta.vwap(oc2, timeframe.change("D"), inputVwapStdDevMult) // anchor "1D" is default
// plot(isPlotVwap ? vwap : na, display = displayOverlayMode, editable = false, force_overlay = true)
// plot(isPlotStd ? upper : na, color = color.gray, display = displayOverlayMode, editable = false, force_overlay = true)
// plot(isPlotStd ? lower : na, color = color.gray, display = displayOverlayMode, editable = false, force_overlay = true)

deltavwap = (close - vwap) / vwap
// deltavwap_pp = deltavwap * 100
// if deltavwap_pp <= -3 or 3 <= deltavwap_pp
//     debugLabelDn(str.format("{0,number,#.#}", deltavwap*100))
// else if -0.2 <= deltavwap_pp and deltavwap_pp <= 0.2
//     debugLabelDn(str.format("{0,number,#.#}", deltavwap*100))

calcdayopen() =>
    //var float dayopenprice = na
    //dayopen = request.security(syminfo.tickerid, "D", open, lookahead = barmerge.lookahead_on)  -- wrong way - dayopen[1] != prevday
    bars = ta.barssince(ta.change(dayofmonth) != 0)
    open[bars]
dayopen = calcdayopen()
deltaopen = (close - dayopen) / dayopen


// pricechange = nz(math.max(
//      math.abs(open-close),
//      math.abs(open-close[1]),
//      math.abs(close-close[1])
//  ))
// pricechange_pos = close > open or close > close[1] ? pricechange : 0
// pricechange_neg = close < open or close < close[1] ? pricechange : 0
// pricechangecum_pos = math.sum(pricechange_pos, inputPricespikeBarsCumulative)
// pricechangecum_neg = math.sum(pricechange_neg, inputPricespikeBarsCumulative)
// pricechangecum_posp99 = ta.percentile_nearest_rank(pricechangecum_pos, inputPricespikeBarsPercentile, inputPricespikePercentileCumulative)
// pricechangecum_negp99 = ta.percentile_nearest_rank(pricechangecum_neg, inputPricespikeBarsPercentile, inputPricespikePercentileCumulative)
// impulse_up = pricechangecum_pos >= pricechangecum_posp99
// impulse_dn = pricechangecum_neg >= pricechangecum_negp99

// plotchar(impulse_up, char = "v", location = location.abovebar, color = color.new(color.red,50), size = size.tiny, force_overlay = true)
// plotchar(impulse_dn, char = "^", location = location.belowbar, color = color.new(color.green,0), size = size.tiny, force_overlay = true)

// if bar_index % 30 == 0
//     debugLabelDn(str.format("{0,number,#.#}\n{1,number,#.#}", deltavwap*100, deltaopen*100))


// ALERTS

strPrice(float v) =>
    var _strPriceScale = str.repeat("#",math.ceil(math.log10(syminfo.pricescale)))
    str.format("{0,number,"+"#."+_strPriceScale+"}",v)
strVolume(float v, string big="M") =>
    format = switch big
        "B" => str.format("{0,number,#.##}B", v / 1000000000)
        "M" => str.format("{0,number,#.##}M", v /    1000000)
    format
strPercent(float v) =>
    str.format("{0,number,#.#}%", v*100)
strUpDn(float v) => v > 0 ? "Up" : v < 0 ? "Dn" : "Flat"
strImpulse() =>
    ""

varip triggrered = map.new<string,bool>()
if barstate.isnew
    triggrered.clear()
istrig(v) => triggrered.contains(v)
notrig(v) => not triggrered.contains(v)
trig(v) => triggrered.put(v,true)

varip float tickprice = na
// debug
// var tickdebug = debugLabelDn("")
// label.set_text(tickdebug, str.format("{0}",tickprice))
// label.set_point(tickdebug, chart.point.now(low))

if isvalueP100 and notrig("huge")
    alert(str.format( "{0} 3min Huge Volume {1} : {2}->{3} D {4} VWAP {5} {6} {7}", syminfo.ticker, strVolume(value,"B"), strPrice(close[1]), strPrice(close), strPercent(deltaopen), strPercent(deltavwap), strUpDn(oc2-oc2[1]), istrig("big")?" SAME":"" ), alert.freq_all)
    trig("huge")
if isvalueP99 and notrig("big")
    alert(str.format( "{0} 3min Big Volume {1} : {2}->{3} D {4} VWAP {5} {6}", syminfo.ticker, strVolume(value,"B"), strPrice(close[1]), strPrice(close), strPercent(deltaopen), strPercent(deltavwap), strUpDn(oc2-oc2[1]) ), alert.freq_all)
    trig("big")
if isvcumP99 and isvalueP50 and notrig("cum")
    if isvcumP99[1]
        alert(str.format( "{0} Cumulative Volume {1} : {2}->{3} D {4} VWAP {5} {6} {7}", syminfo.ticker, strVolume(vcum,"B"), strPrice(close[1]), strPrice(close), strPercent(deltaopen), strPercent(deltavwap), strUpDn(oc2-oc2[1]), "CONTINUE" ), alert.freq_all)
        trig("cum")
    else //new
        alert(str.format( "{0} Cumulative Volume {1} : {2}->{3} D {4} VWAP {5} {6} {7}", syminfo.ticker, strVolume(vcum,"B"), strPrice(close[1]), strPrice(close), strPercent(deltaopen), strPercent(deltavwap), strUpDn(oc2-oc2[1]), "FIRST" ), alert.freq_all)
        trig("cum")

tickprice := close
