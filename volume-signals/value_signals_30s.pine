//@version=6
indicator("Volume Value", "value", format = format.volume, overlay = false, max_labels_count = 500)  // timeframe="30S"

debugLabelUp(txt,offset=0,overlay=true) =>
    label.new(bar_index+offset, high, txt, yloc = yloc.abovebar, style = label.style_arrowdown, force_overlay = overlay, textcolor = color.black)
debugLabelDn(txt,offset=0,overlay=true) =>
    label.new(bar_index+offset, low, txt, yloc = yloc.belowbar, style = label.style_arrowup, force_overlay = overlay, textcolor = color.black)


p99bars = input.int(5000, "30S P99 Bars", inline = "000")
p99 = input.float(99.5, "%", inline = "000")

p99m1bars = input.int(2000, "1m P99 Bars", inline = "001")
p99m1 = input.float(99.5, "%", inline = "001")

p99m3bars = input.int(1000, "3m P99 Bars", inline = "003")
p99m3 = input.float(99.5, "%", inline = "003")

p99m5bars = input.int(1000, "5m P99 Bars", inline = "005")
p99m5 = input.float(99.5, "%", inline = "005")

p99m10bars = input.int(1000, "10m P99 Bars", inline = "010")
p99m10 = input.float(99.5, "%", inline = "010")

var float step1p = input.float(0.5, "step x1 %", inline = "1") / 100  // 0.5 %
var float step10p = input.float(5, "step x10 %", inline = "1") / 100  // 5 %

dispBg = input.bool(true, "Background Highlights", group = "Show/Hide")


var divisor = array.from(
     0.0001, 0.0002, 0.0005,
     0.001, 0.002, 0.005,
     0.01, 0.02, 0.05,
     0.1, 0.2, 0.5,
     1, 2, 5,
     10, 20, 50,
     100, 200, 500,
     1000, 2000, 5000,
     10000, 20000, 50000)

dividx1 = divisor.binary_search_rightmost(close * step1p)
step1 = divisor.get(dividx1)
//roundzone1 = step1 / 8

closeint_ceil = step1 * math.ceil(close / step1)
closeint_floor = step1 * math.floor(close / step1)
highint_floor = step1 * math.floor(high / step1)
lowint_ceil = step1 * math.ceil(low / step1)


value = volume == 0.0 ? na : volume * hl2


vcum1m = math.sum(value, 2)     //  1 min
vcum3m = math.sum(value, 6)     //  3 min
vcum5m = math.sum(value, 10)    //  5 min
vcum10m = math.sum(value, 20)   // 10 min

[vp99m1,vp100m1] = request.security(syminfo.tickerid, "1", [
     ta.percentile_nearest_rank(value, p99m1bars, p99m1),
     ta.percentile_nearest_rank(value, p99m1bars, 100)
     ], lookahead = barmerge.lookahead_on)

[vp99m3,vp100m3] = request.security(syminfo.tickerid, "3", [
     ta.percentile_nearest_rank(value, p99m3bars, p99m3),
     ta.percentile_nearest_rank(value, p99m3bars, 100)
     ], lookahead = barmerge.lookahead_on)

[vp99m5,vp100m5] = request.security(syminfo.tickerid, "5", [
     ta.percentile_nearest_rank(value, p99m5bars, p99m5),
     ta.percentile_nearest_rank(value, p99m5bars, 100)
     ], lookahead = barmerge.lookahead_on)

[vp99m10,vp100m10] = request.security(syminfo.tickerid, "10", [
     ta.percentile_nearest_rank(value, p99m10bars, p99m10),
     ta.percentile_nearest_rank(value, p99m10bars, 100)
     ], lookahead = barmerge.lookahead_on)

vp99 = ta.percentile_nearest_rank(value, p99bars, p99)
vp100 = ta.percentile_nearest_rank(value, p99bars, 100)


isvalueP100 = value >= vp100
isvalueP99 = value >= vp99

isvcum1m = vcum1m >= vp99m1
isvcum3m = vcum3m >= vp99m3
isvcum5m = vcum5m >= vp99m5
isvcum10m = vcum10m >= vp99m10

isany = isvcum1m or isvcum3m or isvcum5m or isvcum10m or isvalueP100 or isvalueP99


enum StateLevel
    touched
    crossed

StateLevel state_high = na
StateLevel state_low = na

if closeint_ceil[2] < closeint_floor[1]  // close[2] < high[1] UP
    txt = array.new<string>()
    from_num = close[2] == closeint_ceil[2] ? closeint_ceil[2] + step1 : closeint_ceil[2]
    to_num = closeint_floor[1]
    for level = from_num to to_num by step1
        txt.push(str.format("{0}",level))
    debugLabelUp(txt.join(","),-1)
else if close[2] < high[1] and closeint_ceil[2] == closeint_floor[1] and (low[1] < closeint_floor[1] and closeint_floor[1] < high[1])
    debugLabelUp(str.format("{0}",closeint_floor[1]),-1)

if closeint_floor[2] > closeint_ceil[1]  // close[2] > low[1] DN
    txt = array.new<string>()
    from_num = close[2] == closeint_floor[2] ? closeint_floor[2] - step1 : closeint_floor[2]
    to_num = closeint_ceil[1]
    for level = from_num to to_num by step1
        txt.push(str.format("{0}",level))
    debugLabelDn(txt.join(","),-1)
else if close[2] > low[1] and closeint_floor[2] == closeint_ceil[1] and (low[1] < closeint_ceil[1] and closeint_ceil[1] < high[1])
    debugLabelDn(str.format("{0}",closeint_ceil[1]),-1)


// //if math.abs(high-highint1) <= roundzone1
// if high[1] > highint1[1]
//     state_high := StateLevel.crossed
// //if math.abs(low-lowint1) <= roundzone1
// if low[1] < lowint1[1]
//     state_low := StateLevel.crossed


//var laststep_h = float(na)
//var laststep_l = float(na)
//stepchanged = switch
//    close > open => laststep_h != highint1 and math.abs(high-highint1) <= roundzone1
//    close < open => laststep_l != lowint1 and math.abs(low-lowint1) <= roundzone1
//    => false
//iisvalueP100 = (not isvalueP100[1] and isvalueP100) or (isvalueP100 and stepchanged)
//iisvalueP99 = (not isvalueP99[1] and isvalueP99) or (isvalueP99 and stepchanged)
//iisvcum1m = (not isvcum1m[1] and isvcum1m) or (isvcum1m and stepchanged)
//iisvcum3m = (not isvcum3m[1] and isvcum3m) or (isvcum3m and stepchanged)
//iisvcum5m = (not isvcum5m[1] and isvcum5m) or (isvcum5m and stepchanged)
//iisvcum10m = (not isvcum10m[1] and isvcum10m) or (isvcum10m and stepchanged)
//iisany = (not isany[1] and isany) or (isany and stepchanged)
//if isany and stepchanged
//    if close > open
//        debugLabelUp(str.format("{0}",highint1))
//    else if close < open
//        debugLabelDn(str.format("{0}",lowint1))
//    // else
//    //     debugLabelUp(str.format("{0}",closeint1))
//if math.abs(high-highint1) <= roundzone1
//    laststep_h := highint1
//if math.abs(low-lowint1) <= roundzone1
//    laststep_l := lowint1


colorplotvalue = switch
    isvalueP100 => color.new(color.purple, 35)
    isvalueP99 => color.new(color.blue, 35)
    isvcum1m => color.new(color.gray, 50)
    isvcum3m => color.new(color.blue, 50)
    isvcum5m => color.new(color.olive, 50)
    isvcum10m => color.new(color.olive, 75)
    => color.new(color.gray, 75)

bgcolorall = switch
    isvalueP100 => color.new(color.purple, 85)
    isvalueP99 => color.new(color.blue, 85)
    isvcum1m => color.new(color.gray, 85)
    isvcum3m => color.new(color.blue, 90)
    //isvcum5m => color.new(color.olive, 85)
    //isvcum10m => color.new(color.olive, 95)
    => na
bgcolorall_1 = switch
    isvalueP100 => color.new(color.purple, 85)
    isvalueP99 => color.new(color.blue, 85)
    isvcum1m => color.new(color.gray, 85)
    isvcum3m => color.new(color.blue, 90)
    isvcum5m => color.new(color.olive, 85)
    isvcum10m => color.new(color.olive, 95)
    => na

plot(value, color=colorplotvalue, style=plot.style_columns, title="Value")

bgcolor(bgcolorall_1, editable = false, display = dispBg ? display.all : display.none)
bgcolor(bgcolorall, editable = false, display = dispBg ? display.all : display.none, force_overlay = true)

