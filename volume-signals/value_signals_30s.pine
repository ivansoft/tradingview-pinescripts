//@version=6
indicator("Volume Value", "value", format = format.volume, overlay = false, max_labels_count = 500)  // timeframe="30S"

debugLabelUp(txt,offset=0,overlay=true) =>
    label.new(bar_index+offset, high, txt, yloc = yloc.abovebar, style = label.style_arrowdown, force_overlay = overlay, textcolor = color.black)
debugLabelDn(txt,offset=0,overlay=true) =>
    label.new(bar_index+offset, low, txt, yloc = yloc.belowbar, style = label.style_arrowup, force_overlay = overlay, textcolor = color.black)

var islqdt = ticker.standard() == "RUS:LQDT"

p99bars = input.int(5000, "30S P99 Bars", inline = "000")
p99 = input.float(99.5, "%", inline = "000")

p99m1bars = input.int(2000, "1m P99 Bars", inline = "001")
p99m1 = input.float(99.5, "%", inline = "001")

p99m3bars = input.int(1000, "3m P99 Bars", inline = "003")
p99m3 = input.float(99.5, "%", inline = "003")

p99m5bars = input.int(1000, "5m P99 Bars", inline = "005")
p99m5 = input.float(99.5, "%", inline = "005")

p99m10bars = input.int(1000, "10m P99 Bars", inline = "010")
p99m10 = input.float(99.5, "%", inline = "010")

var float step1p = input.float(0.5, "step x1 %", inline = "1") / 100  // 0.5 %
var float step10p = input.float(5, "step x10 %", inline = "1") / 100  // 5 %

var float zonediv = input.float(8, "Level zone (1/x)", inline = "2")

var int histroySize = input.int(5, "Levels History Size", inline = "3")

dispBg = input.bool(true, "Background Highlights", group = "Show/Hide")
dispLabels = input.bool(true, "Labels", group = "Show/Hide")

var divisor = array.from(
     0.0001, 0.0002, 0.0005,
     0.001, 0.002, 0.005,
     0.01, 0.02, 0.05,
     0.1, 0.2, 0.5,
     1, 2, 5,
     10, 20, 50,
     100, 200, 500,
     1000, 2000, 5000,
     10000, 20000, 50000)

dividx1 = divisor.binary_search_rightmost(close * step1p)
step1 = divisor.get(dividx1)
roundzone1 = step1 / zonediv

openint_ceil = step1 * math.ceil(open / step1)
openint_floor = step1 * math.floor(open / step1)
closeint_ceil = step1 * math.ceil(close / step1)
closeint_floor = step1 * math.floor(close / step1)

highint_floor = step1 * math.floor(high / step1)
lowint_ceil = step1 * math.ceil(low / step1)

highint_ceil = step1 * math.ceil(high / step1)
lowint_floor = step1 * math.floor(low / step1)


value = volume == 0.0 ? na : volume * hl2


[_value, vcum1m,vcum3m,vcum5m,vcum10m] = request.security(syminfo.tickerid, "30S", [
     value,
     math.sum(value, 2),     //  1 min
     math.sum(value, 6),     //  3 min
     math.sum(value, 10),    //  5 min
     math.sum(value, 20)     // 10 min
     ], lookahead = barmerge.lookahead_on)


[vp99,vp100] = request.security(syminfo.tickerid, "30S", [
     ta.percentile_nearest_rank(value, p99bars, p99),
     ta.percentile_nearest_rank(value, p99bars, 100)
     ], lookahead = barmerge.lookahead_on)

[vp99m1,vp100m1] = request.security(syminfo.tickerid, "1", [
     ta.percentile_nearest_rank(value, p99m1bars, p99m1),
     ta.percentile_nearest_rank(value, p99m1bars, 100)
     ], lookahead = barmerge.lookahead_on)

[vp99m3,vp100m3] = request.security(syminfo.tickerid, "3", [
     ta.percentile_nearest_rank(value, p99m3bars, p99m3),
     ta.percentile_nearest_rank(value, p99m3bars, 100)
     ], lookahead = barmerge.lookahead_on)

[vp99m5,vp100m5] = request.security(syminfo.tickerid, "5", [
     ta.percentile_nearest_rank(value, p99m5bars, p99m5),
     ta.percentile_nearest_rank(value, p99m5bars, 100)
     ], lookahead = barmerge.lookahead_on)

[vp99m10,vp100m10] = request.security(syminfo.tickerid, "10", [
     ta.percentile_nearest_rank(value, p99m10bars, p99m10),
     ta.percentile_nearest_rank(value, p99m10bars, 100)
     ], lookahead = barmerge.lookahead_on)


isvalueP100 = _value >= vp100
isvalueP99 = _value >= vp99

isvcum1m = vcum1m >= vp99m1
isvcum3m = vcum3m >= vp99m3
isvcum5m = vcum5m >= vp99m5
isvcum10m = vcum10m >= vp99m10

isanyval = isvalueP100 or isvalueP99
isanycum = isvcum1m or isvcum3m or isvcum5m or isvcum10m
isany = isanyval or isanycum


// PLOT VALUE


colorplotvalue = switch
    isvalueP100 => color.new(color.purple, 35)
    isvalueP99 => color.new(color.blue, 35)
    isvcum1m => color.new(color.gray, 50)
    isvcum3m => color.new(color.blue, 50)
    isvcum5m => color.new(color.olive, 50)
    isvcum10m => color.new(color.olive, 75)
    => color.new(color.gray, 75)

bgcolorall = switch
    isvalueP100 => color.new(color.purple, 85)
    isvalueP99 => color.new(color.blue, 85)
    isvcum1m => color.new(color.gray, 85)
    isvcum3m => color.new(color.blue, 90)
    //isvcum5m => color.new(color.olive, 85)
    //isvcum10m => color.new(color.olive, 95)
    => na
bgcolorall_1 = switch
    isvalueP100 => color.new(color.purple, 85)
    isvalueP99 => color.new(color.blue, 85)
    isvcum1m => color.new(color.gray, 85)
    isvcum3m => color.new(color.blue, 90)
    isvcum5m => color.new(color.olive, 85)
    isvcum10m => color.new(color.olive, 95)
    => na

plot(value, color=colorplotvalue, style=plot.style_columns, title="Value", editable = false)

bgcolor(bgcolorall_1, editable = false, display = dispBg ? display.all : display.none)
bgcolor(bgcolorall, editable = false, display = dispBg ? display.all : display.none, force_overlay = true)


// LEVELS


enum StateLevel
    near
    reached
    touched
    crossed
    crossed_multiple
strstate(s) => switch s
    StateLevel.near => "near"
    StateLevel.reached => "reached"
    StateLevel.touched => "touched"
    StateLevel.crossed => "crossed"
    StateLevel.crossed_multiple => "crossed+"
    => "n/a"
StateLevel state_up = na
StateLevel state_dn = na
txt = array.new<string>()
price_level_crossed_arr = array.new<float>()
price_level_crossed = float(na)
price_level_touched = float(na)
price_level_near = float(na)
get_level_crossed() => price_level_crossed_arr.size() > 0 ? price_level_crossed_arr.last() : na

type LevelStats
    int count              // count of signals on the same level (same price) - used to reduce triggering
type LevelInfo
    LevelStats stats
    float price            // current level value - main, used for trigger detection
    int indexstart         // index of first signal
type LevelContext
    LevelInfo curr
    array<LevelInfo> val     // last unique level values
    array<LevelInfo> bigval  // triggered on bars with isvalueP99/isvalueP100 ..
create_levelinfo() => LevelInfo.new(stats=LevelStats.new(count=0))
create_levelcontext() => LevelContext.new(curr=create_levelinfo(),val=array.from(create_levelinfo()),bigval=array.from(create_levelinfo()))
var level_crossed = create_levelcontext()
var level_touched = create_levelcontext()
var level_near = create_levelcontext()
deepcopy_levelinfo(LevelInfo frominfo, LevelInfo toinfo) =>
    toinfo.price := frominfo.price
    toinfo.indexstart := frominfo.indexstart
    toinfo.stats.count := frominfo.stats.count

barsanyval = ta.barssince(isanyval)
barsanycum = ta.barssince(isanyval)
barsany = ta.barssince(isanyval)


lastdirection(baseprice,lookback=14) =>
    result = 0
    for i = 1 to lookback
        if close[i] == baseprice
            if open[i] > baseprice
                result := 1
                break
            else if open[i] < baseprice
                result := -1
                break
        else if close[i] > baseprice
            result := 1
            break
        else if close[i] < baseprice
            result := -1
            break
    result
lvl(l) =>
    switch lastdirection(l)
        1 => "%"
        -1 => "#"
        0 => "0"

isbarconfirmed = barstate.isconfirmed and not islqdt

if isbarconfirmed

    if closeint_ceil[1] < closeint_floor  // CROSSED UP
        from_num = close[1] == closeint_ceil[1] ? closeint_ceil[1] + step1 : closeint_ceil[1]
        to_num = closeint_floor
        for level = from_num to to_num by step1
            price_level_crossed_arr.push(level)
            level_crossed.curr.stats.count := level_crossed.curr.stats.count + 1
            txt.push(str.format("{0}@",level))
        state_up := txt.size() > 1 ? StateLevel.crossed_multiple : StateLevel.crossed
    else if closeint_ceil[1] < openint_floor
        from_num = close[1] == closeint_ceil[1] ? closeint_ceil[1] + step1 : closeint_ceil[1]
        to_num = openint_floor
        for level = from_num to to_num by step1
            price_level_crossed_arr.push(level)
            level_crossed.curr.stats.count := level_crossed.curr.stats.count + 1
            txt.push(str.format("{0}@",level))
        state_up := txt.size() > 1 ? StateLevel.crossed_multiple : StateLevel.crossed
    else if closeint_ceil[1] == closeint_floor and lastdirection(closeint_floor) < 0 and
         (close[1] < close) and
         (close[1] <= closeint_ceil[1] and closeint_ceil[1] < close)
        price_level_crossed_arr.push(closeint_floor)
        level_crossed.curr.stats.count := level_crossed.curr.stats.count + 1
        txt.push(str.format("{0}^{1}",closeint_floor,lvl(closeint_floor)))
        state_up := StateLevel.crossed
    else if closeint_ceil[1] == openint_floor and lastdirection(openint_floor) < 0 and
         (close[1] < open) and
         (close[1] <= closeint_ceil[1] and closeint_ceil[1] < open)
        price_level_crossed_arr.push(openint_floor)
        level_crossed.curr.stats.count := level_crossed.curr.stats.count + 1
        txt.push(str.format("{0}*{1}",openint_floor,lvl(openint_floor)))
        state_up := StateLevel.crossed
        if closeint_floor[1] == closeint_ceil and openint_floor == closeint_ceil and
             (close[1] > close) and
             (close < closeint_floor[1] and closeint_floor[1] <= close[1])
            txt.push(str.format("{0}v{1}",closeint_ceil,lvl(closeint_ceil)))
            state_dn := StateLevel.crossed

    if closeint_floor[1] > closeint_ceil  // CROSSED DN
        from_num = close[1] == closeint_floor[1] ? closeint_floor[1] - step1 : closeint_floor[1]
        to_num = closeint_ceil
        for level = from_num to to_num by step1
            price_level_crossed_arr.push(level)
            level_crossed.curr.stats.count := level_crossed.curr.stats.count + 1
            txt.push(str.format("{0}@",level))
        state_dn := txt.size() > 1 ? StateLevel.crossed_multiple : StateLevel.crossed
    else if closeint_floor[1] > openint_ceil
        from_num = close[1] == closeint_floor[1] ? closeint_floor[1] - step1 : closeint_floor[1]
        to_num = openint_ceil
        for level = from_num to to_num by step1
            price_level_crossed_arr.push(level)
            level_crossed.curr.stats.count := level_crossed.curr.stats.count + 1
            txt.push(str.format("{0}@",level))
        state_dn := txt.size() > 1 ? StateLevel.crossed_multiple : StateLevel.crossed
    else if closeint_floor[1] == closeint_ceil and lastdirection(closeint_ceil) > 0 and
         (close[1] > close) and
         (close < closeint_floor[1] and closeint_floor[1] <= close[1])
        price_level_crossed_arr.push(closeint_ceil)
        level_crossed.curr.stats.count := level_crossed.curr.stats.count + 1
        txt.push(str.format("{0}v{1}",closeint_ceil,lvl(closeint_ceil)))
        state_dn := StateLevel.crossed
    else if closeint_floor[1] == openint_ceil and lastdirection(closeint_ceil) > 0 and
         (close[1] > open) and
         (open < closeint_floor[1] and closeint_floor[1] <= close[1])
        price_level_crossed_arr.push(openint_ceil)
        level_crossed.curr.stats.count := level_crossed.curr.stats.count + 1
        txt.push(str.format("{0}*{1}",openint_ceil,lvl(closeint_ceil)))
        state_dn := StateLevel.crossed
        if closeint_ceil[1] == closeint_floor and openint_ceil == closeint_floor and
             (close[1] < close) and
             (close[1] <= closeint_ceil[1] and closeint_ceil[1] < close)
            txt.push(str.format("{0}^{1}",closeint_floor,lvl(closeint_floor)))
            state_up := StateLevel.crossed

    if highint_ceil - math.max(close, open) < roundzone1
        if lastdirection(highint_ceil) < 0
            price_level_near := highint_ceil
            level_near.curr.stats.count := level_near.curr.stats.count + 1
            txt.push(str.format("under {0}",highint_ceil))
            state_up := StateLevel.near

    if math.min(close, open) - lowint_floor < roundzone1
        if lastdirection(lowint_floor) > 0
            price_level_near := lowint_floor
            level_near.curr.stats.count := level_near.curr.stats.count + 1
            txt.push(str.format("above {0}",lowint_floor))
            state_dn := StateLevel.near

    if (low < highint_floor and highint_floor <= high) and math.max(close, open) <= highint_floor
        if lastdirection(highint_floor) < 0
            price_level_touched := highint_floor
            level_touched.curr.stats.count := level_touched.curr.stats.count + 1
            if high > highint_floor
                txt.push(str.format("touched {0}",highint_floor))
                state_up := StateLevel.touched
            else
                txt.push(str.format("hit {0}",highint_floor))
                state_up := StateLevel.reached

    if (low <= lowint_ceil and lowint_ceil < high) and math.min(close, open) >= lowint_ceil
        if lastdirection(lowint_ceil) > 0
            price_level_touched := lowint_ceil
            level_touched.curr.stats.count := level_touched.curr.stats.count + 1
            if low < lowint_ceil
                txt.push(str.format("touched {0}",lowint_ceil))
                state_dn := StateLevel.touched
            else
                txt.push(str.format("hit {0}",lowint_ceil))
                state_dn := StateLevel.reached

    // if timestamp("27 Feb 2025 22:56:00 GMT+3") <= time and time <= timestamp("27 Feb 2025 22:58:00 GMT+3")
    //     log.info("{0} {1} {2} {3} {4}", strstate(state_up), strstate(state_dn), closeint_floor[1], closeint_ceil, lastdirection(closeint_ceil))

islevelchanged(float currvalue, float lastvalue) =>
    not na(currvalue) and not na(lastvalue) and currvalue != lastvalue

check_max_size(array<LevelInfo> arr) =>
    if arr.size() > histroySize
        arr.pop()
reset_stats(LevelInfo info, int index) =>
    info.stats.count := 0
    info.indexstart := bar_index
check_level_changed(LevelContext level, float price) =>
    if islevelchanged(price, level.curr.price)
        level.val.unshift(level.curr.copy())  //deepcopy_levelinfo(frominfo=level.curr, toinfo=level.prev())
        reset_stats(level.curr, bar_index)
        check_max_size(level.val)
        if isanyval
            level.bigval.unshift(create_levelinfo())
            reset_stats(level.bigval.first(), bar_index)
            check_max_size(level.bigval)

update_price(LevelInfo info, float price) =>
    if na(info.price)
        info.indexstart := bar_index    // first-time level detected
    info.price := price
endofbar_update_levelinfo_price(LevelContext level, float price) =>
    if not na(price)
        update_price(level.curr, price)
        if isanyval
            update_price(level.bigval.first(), price)

if isbarconfirmed

    price_level_crossed := get_level_crossed()

    check_level_changed(level_crossed, price_level_crossed)
    check_level_changed(level_touched, price_level_touched)
    check_level_changed(level_near, price_level_near)



// ALERTS

var volume_max = 0.0
// volume_median_5000 = ta.median(_value, 5000)
var volume_scale = float(na)
if _value > volume_max
    volume_max := _value
if barstate.islastconfirmedhistory
    //log.info("{0} {1}", math.ceil(math.log10(volume_max)), volume_max)
    volume_scale := math.ceil(math.log10(volume_max/2))
strVolume(float v) =>
    format = switch
        volume_scale >= 8 => str.format("{0,number,#.##}B", v / 1000000000)
        volume_scale >= 5 => str.format("{0,number,#.##}M", v /    1000000)
        =>                   str.format("{0,number,#.##}K", v /       1000)
    format
strPrice(float v) =>
    var _scale = math.ceil(math.log10(syminfo.pricescale))
    var _strscale = str.repeat("#",_scale)
    var _strfmt = _scale > 0 ? "#."+_strscale : "#"
    //if barstate.islastconfirmedhistory
    //    log.info("{0} {1} {2}", _scale, _strscale, _strfmt)
    str.format("{0,number,"+_strfmt+"}",v)
strPercent(float v) => str.format("{0,number,#.#}%", v*100)
strUpDn(float v) => v > 0 ? "Up" : v < 0 ? "Dn" : "Flat"

varip triggrered = map.new<string,bool>()
if barstate.isnew
    triggrered.clear()
istrig(v) => triggrered.contains(v)
notrig(v) => not triggrered.contains(v)
trig(v) => triggrered.put(v,true)


/// --- nearest in history - any
nearestlevel() => switch math.max(level_crossed.curr.indexstart, level_touched.curr.indexstart, level_near.curr.indexstart)
    level_crossed.curr.indexstart => level_crossed.curr.price
    level_touched.curr.indexstart => level_touched.curr.price
    level_near.curr.indexstart => level_near.curr.price
    => na
prevnearestlevel() => switch
    math.min(level_crossed.val.size(), level_touched.val.size(), level_near.val.size()) < 1 => nearestlevel()
    =>
        switch math.max(level_crossed.val.get(0).indexstart, level_touched.val.get(0).indexstart, level_near.val.get(0).indexstart)
            level_crossed.val.get(0).indexstart => level_crossed.val.get(0).price
            level_touched.val.get(0).indexstart => level_touched.val.get(0).price
            level_near.val.get(0).indexstart => level_near.val.get(0).price
            => nearestlevel()
prevnearestlevelbigval() => switch
    math.min(level_crossed.bigval.size(), level_touched.bigval.size(), level_near.bigval.size()) < 2 => prevnearestlevel()
    =>
        switch math.max(level_crossed.bigval.get(1).indexstart, level_touched.bigval.get(1).indexstart, level_near.bigval.get(1).indexstart)
            level_crossed.bigval.get(1).indexstart => level_crossed.bigval.get(1).price
            level_touched.bigval.get(1).indexstart => level_touched.bigval.get(1).price
            level_near.bigval.get(1).indexstart => level_near.bigval.get(1).price
            => prevnearestlevel()

/// --- nearest in history - "-" crossed
nearestnearlevel() => switch math.max(level_touched.curr.indexstart, level_near.curr.indexstart)
    level_touched.curr.indexstart => level_touched.curr.price
    level_near.curr.indexstart => level_near.curr.price
    => na
prevnearestnearlevel() => switch
    math.min(level_touched.val.size(), level_near.val.size()) < 1 => nearestnearlevel()
    =>
        switch math.max(level_touched.val.get(0).indexstart, level_near.val.get(0).indexstart)
            level_touched.val.get(0).indexstart => level_touched.val.get(0).price
            level_near.val.get(0).indexstart => level_near.val.get(0).price
            => nearestnearlevel()
prevnearestnearlevelbigval() => switch
    math.min(level_touched.bigval.size(), level_near.bigval.size()) < 2 => prevnearestnearlevel()
    =>
        switch math.max(level_touched.bigval.get(1).indexstart, level_near.bigval.get(1).indexstart)
            level_touched.bigval.get(1).indexstart => level_touched.bigval.get(1).price
            level_near.bigval.get(1).indexstart => level_near.bigval.get(1).price
            => prevnearestnearlevel()

nearestprice() => nz(price_level_crossed, nz(price_level_near, price_level_touched))
nearestnearprice() => nz(price_level_near, price_level_touched)

prevbigvalcrossed() => nz(level_crossed.val.get(0).price, nz(level_crossed.val.get(0).price, level_crossed.curr.price))
prevbigvaltouched() => nz(level_touched.val.get(0).price, nz(level_touched.val.get(0).price, level_touched.curr.price))
prevbigvalnear()    => nz(level_near.val.get(0).price,    nz(level_near.val.get(0).price,    level_near.curr.price))


dayopen = open[ta.barssince(ta.change(dayofmonth) != 0)]
deltaopen = (close - dayopen) / dayopen
oc2 = (open + close) / 2
vwap = ta.vwap(oc2, ta.change(dayofmonth) != 0)
deltavwap = (close - vwap) / vwap
// plot(vwap, force_overlay = true)
// plot(dayopen, force_overlay = true)


iscrossedup = state_up == StateLevel.crossed or state_up == StateLevel.crossed_multiple
iscrosseddn = state_dn == StateLevel.crossed or state_dn == StateLevel.crossed_multiple

isunderup = state_up == StateLevel.near or state_up == StateLevel.reached or state_up == StateLevel.touched
isabovedn = state_dn == StateLevel.near or state_dn == StateLevel.reached or state_dn == StateLevel.touched

priceinfobigval = switch
    iscrossedup => str.format("^ {0}->{1}", strPrice(prevbigvalcrossed()), strPrice(price_level_crossed))
    iscrosseddn => str.format("v {0}->{1}", strPrice(prevbigvalcrossed()), strPrice(price_level_crossed))
    isunderup => str.format("^^ {0}", strPrice(nearestnearprice()))
    isabovedn => str.format("vv {0}", strPrice(nearestnearprice()))

pricechangeinfo = str.format("D {0} VWAP {1} {2}", strPercent(deltaopen), strPercent(deltavwap), strUpDn(oc2-oc2[1]))

varip float tickprice = na

if islqdt
    priceinfobigval := str.format("{0}->{1}", strPrice(dayopen), strPrice(close))
    pricechangeinfo := str.format("Tick {0}", strUpDn(close-tickprice))

notrigval = notrig("big") and notrig("huge")


if isvalueP100 and notrig("huge")
    alert(str.format( "{0} 30S Huge Volume {1}({2}) : {3} {4} {5}", syminfo.ticker, strVolume(_value), strPercent(_value/volume_max), priceinfobigval, pricechangeinfo, istrig("big")?"SAME":"" ), alert.freq_all)
    trig("huge")
if isvalueP99 and notrig("big")
    alert(str.format( "{0} 30S Big Volume {1}({2}) : {3} {4}", syminfo.ticker, strVolume(_value), strPercent(_value/volume_max), priceinfobigval, pricechangeinfo ), alert.freq_all)
    trig("big")
if isvcum1m and notrig("1mbig") and notrigval and not isanyval[1]
    alert(str.format( "{0} 1m Big Volume {1}({2}) : {3} {4} {5}", syminfo.ticker, strVolume(_value), strPercent(vcum1m/volume_max), priceinfobigval, pricechangeinfo, istrig("big") or istrig("huge")?"SAME":"" ), alert.freq_all)
    trig("1mbig")
if vcum1m >= vp100m1 and notrig("1mhuge") and notrigval and not isanyval[1]
    alert(str.format( "{0} 1m Huge Volume {1}({2}) : {3} {4}", syminfo.ticker, strVolume(_value), strPercent(vcum1m/volume_max), priceinfobigval, pricechangeinfo, istrig("big") or istrig("huge") or istrig("1mbig")?"SAME":"" ), alert.freq_all)
    trig("1mhuge")


if (iscrossedup or iscrosseddn) and islevelchanged(price_level_crossed, level_crossed.curr.price) and notrig("level") and notrigval and not islqdt
    alert(str.format( "{0} 30S Cross Level {1}->{2} D {3} VWAP {4} {5}", syminfo.ticker, strPrice(level_crossed.curr.price), strPrice(price_level_crossed), strPercent(deltaopen), strPercent(deltavwap), strUpDn(price_level_crossed-level_crossed.curr.price) ), alert.freq_all)
    trig("level")

levelnearstatscount = math.max(level_near.curr.stats.count, level_touched.curr.stats.count)
var triggerscountnear = 0
if islevelchanged(price_level_near, level_near.curr.price) or islevelchanged(price_level_touched, level_touched.curr.price)
    triggerscountnear := 0
if (isunderup or isabovedn) and (levelnearstatscount >= 3 and levelnearstatscount % 3 == 0 and triggerscountnear < 3) and notrig("near")
    alert(str.format( "{0} 30S Near Level {1} D {3} VWAP {4} {5}", syminfo.ticker, priceinfobigval, strPercent(deltaopen), strPercent(deltavwap), strUpDn(nearestnearprice()-prevnearestnearlevel()) ), alert.freq_all)
    triggerscountnear := triggerscountnear + 1
    trig("near")



// DEBUG

boostmult(count) =>
    switch
        count >= 256 => 256  // max every 256's bar (~2hour)
        count >= 128 => 128
        count >= 64 => 64
        count >= 32 => 32
        count >= 16 => 16
        count >= 8 => 8
        count >= 4 => 4
        count >= 2 => 2
        => 1
type BoostCondCtx
    condindex = 0
    condcount = 0
    name = ""  // for debug
method boostcond(BoostCondCtx ctx, counter,limit=0,perbars=0) =>
    mult = boostmult(counter)
    cond = counter % mult == 0
    // if timestamp("26 Feb 2025 11:30:00 GMT+3") <= time and time <= timestamp("26 Feb 2025 13:45:00 GMT+3")
    //     log.info("{0} {1} : {2} % {3} = {4} - [{5}] {6} {7} : {8}", price_level_near, last_level_near, counter, mult, cond, ctx.name, limit, ctx.condcount, bar_index - ctx.condindex)
    if limit > 0
        if ctx.condindex > 0
            if bar_index - ctx.condindex > perbars  // limit exceeded
                 or counter == 0                    // external conditions (level) changed
                ctx.condindex := 0
                ctx.condcount := 0
        if cond
            if ctx.condindex == 0
                ctx.condindex := bar_index
            ctx.condcount := ctx.condcount + 1
            if ctx.condcount > limit
                cond := false
    cond
var ctxcross = BoostCondCtx.new(0,0,"cross")
var ctxnear = BoostCondCtx.new(0,0,"near")
//var ctxshared = BoostCondCtx.new(0,0,"shared")


printLabelUp(cond) =>
    if cond
        debugLabelUp(txt.join(","))
printLabelDn(cond) =>
    if cond
        debugLabelDn(txt.join(","))

if dispLabels
    switch state_up
        StateLevel.crossed_multiple => printLabelUp(islevelchanged(price_level_crossed,level_crossed.curr.price))  //debugLabelUp(txt.join(","))
        StateLevel.crossed =>  printLabelUp(islevelchanged(price_level_crossed,level_crossed.curr.price))  //debugLabelUp(txt.join(","))  //printLabelUp(ctxcross.boostcond(math.min(level_crossed_count,barsanyval),1,50))
        StateLevel.reached =>
            if isanyval
                debugLabelUp(txt.join(","))
        StateLevel.touched =>
            if isanyval
                debugLabelUp(txt.join(","))
        StateLevel.near => printLabelUp(ctxnear.boostcond(math.min(level_near.curr.stats.count,barsanyval),1,150))
    switch state_dn
        StateLevel.crossed_multiple => printLabelDn(islevelchanged(price_level_crossed,level_crossed.curr.price))  //debugLabelDn(txt.join(","))  //printLabelDn(ctxshared.boostcond(level_crossed_count))
        StateLevel.crossed => printLabelDn(islevelchanged(price_level_crossed,level_crossed.curr.price))  //debugLabelDn(txt.join(","))  //printLabelDn(ctxcross.boostcond(math.min(level_crossed_count,barsanyval),1,50))
        StateLevel.reached =>
            if isanyval
                debugLabelDn(txt.join(","))
        StateLevel.touched =>
            if isanyval
                debugLabelDn(txt.join(","))
        StateLevel.near => printLabelDn(ctxnear.boostcond(math.min(level_near.curr.stats.count,barsanyval),1,150))



// EOB - End of Bar
tickprice := close

endofbar_update_levelinfo_price(level_crossed, price_level_crossed)
endofbar_update_levelinfo_price(level_touched, price_level_touched)
endofbar_update_levelinfo_price(level_near, price_level_near)
