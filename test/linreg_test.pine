//@version=5
indicator("LinearRegTest", "linreg_test", overlay = true, max_lines_count = 500)

// detect ATR spike
// anchor spike BAR
// make RANGE: High+median(atr)/2 - Low-median(atr)/2
// divide spike BAR into ranges: 1/3, 1/2, 2/3
// ? detect size of body in new bar ? - await +1 bar
// use 5 STATES: INTENDUP, INTENDDOWN, UP, DOWN, FLAT\
//   new close inside range = flat
//
//   flat - up - down - up  =  starting uptrend, up with retest
//   flat - up - down - flat  = shifted flat

var day2secs = 2 * 24 * 60 * 60
var day3secs = 3 * 24 * 60 * 60
var day4secs = 3 * 24 * 60 * 60
var day5secs = 5 * 24 * 60 * 60
var day7secs = 7 * 24 * 60 * 60
var hour1secs = 1 * 60 * 60
var hour2secs = 2 * 60 * 60
var hour4secs = 4 * 60 * 60
var hour5secs = 5 * 60 * 60
var min10secs = 10 * 60
var min15secs = 15 * 60
var min20secs = 20 * 60
var min30secs = 30 * 60
var day2length = math.ceil(day2secs / timeframe.in_seconds())
var day3length = math.ceil(day3secs / timeframe.in_seconds())
var day4length = math.ceil(day4secs / timeframe.in_seconds())
var day5length = math.ceil(day5secs / timeframe.in_seconds())
var day7length = math.ceil(day7secs / timeframe.in_seconds())
var hour1length = math.ceil(hour1secs / timeframe.in_seconds())
var hour2length = math.ceil(hour2secs / timeframe.in_seconds())
var hour4length = math.ceil(hour4secs / timeframe.in_seconds())
var hour5length = math.ceil(hour5secs / timeframe.in_seconds())
var min10length = math.ceil(min10secs / timeframe.in_seconds())
var min15length = math.ceil(min15secs / timeframe.in_seconds())
var min20length = math.ceil(min20secs / timeframe.in_seconds())
var min30length = math.ceil(min30secs / timeframe.in_seconds())

prevatr = ta.atr(1)[1]
prevhl2 = hl2[1]
prevhigh = high[1]
prevlow = low[1]
percentatr = ta.percentile_linear_interpolation(prevatr, min15length, 50)  // median
prevatrx = prevatr * 1.00

levelhigh = prevhl2 + percentatr
levellow = prevhl2 - percentatr
crosshigh = close > levelhigh and nz(high[1],high) < high
crosslow = close < levellow and nz(low[1],low) > low

plot(not crosshigh ? levelhigh : levelhigh, "high", display = display.pane+display.data_window, style = plot.style_steplinebr)
plot(not crosslow ? levellow : levellow, "low", display = display.pane+display.data_window, style = plot.style_steplinebr)

// barstate
hl41 = (high - low) / 4 + low
hl43 = (high - low) * 3 / 4 + low
// log.info("{0} {1}/{2}", hl2, hl3, hl32)
plot(hl2, "hl2", linewidth = 2, style = plot.style_cross)
plot(hl41, "hl4", linewidth = 2, style = plot.style_cross)
plot(hl43, "hl43", linewidth = 2, style = plot.style_cross)

// if high[1] < high
//     label.new(chart.point.now(), "^", yloc = yloc.abovebar, style = label.style_none, size = size.normal)  // too many symbols
plotchar(high[1] > high, char = "v", location = location.abovebar, color = color.new(color.red,50), size = size.tiny)
plotchar(low[1] < low, char = "^", location = location.belowbar, color = color.new(color.green,0), size = size.tiny)

var int flat_anchor = na
flat_anchor_offset = nz(bar_index - flat_anchor,1)
isInsidePrevbar = na(high[flat_anchor_offset]) ? false :
     (low[flat_anchor_offset] <= close and close <= high[flat_anchor_offset]) and     // close inside anchor [high, low]
     (low[flat_anchor_offset] <= open and open <= high[flat_anchor_offset]) and       // open inside anchor [high, low]
     (high[flat_anchor_offset] >= hl43 and hl41 >= low[flat_anchor_offset])           // doi not exceed 1/4
flat_anchor := isInsidePrevbar ? na(flat_anchor) ? bar_index - 1 : flat_anchor : na
// log.info("{0} {1} {2}", flat_anchor, flat_anchor_offset, isflat)
flatcolor = isInsidePrevbar ? na : color.new(color.gray, 90)
bgcolor(flatcolor, editable = false)

//[atr1D, lengthD, atrDD] = request.security(syminfo.tickerid, "D", [ta.atr(1), bar_index+1, ta.median(ta.atr(1),bar_index+1)], lookahead = barmerge.lookahead_off)
//atrD = ta.median(atr1D, lengthD) // 9.9 vs 16.7
[atrDD] = request.security(syminfo.tickerid, "D", [ta.median(ta.atr(1),bar_index+1)], lookahead = barmerge.lookahead_off)
var int daylength = na
daychange = ta.change(dayofmonth) != 0
daychangelength = ta.barssince(daychange)
if daychange
    daylength := daychangelength[1]
if daychange and not na(daylength)
    line.new(bar_index, open+atrDD, bar_index+daylength, open+atrDD, style = line.style_dashed)
    line.new(bar_index, open-atrDD, bar_index+daylength, open-atrDD, style = line.style_dashed)
    // 27.9 9.9 16.7 141 405
    //log.info("{0} {1} {2} {3} {4} {5}", atr1D, atrD, atrDD, lengthD, daylength)



// hour1reg = ta.linreg(hl2, hour1length, 0)
// hour2reg = ta.linreg(hl2, hour2length, 0)
// ta.stdev()

// plot(ta.valuewhen(ta.crossover(high,levelhigh)), )

//trendhigh = crosshigh[1] and high > high[1]
//trendlow = crosslow[1] and low < low[1]
//flat = not (trendhigh or trendlow)

//crosscolor = crosshigh ? color.new(color.green, 90) :
//             crosslow ? color.new(color.red, 90) :
//             na
//bgcolor(crosscolor, editable = false)

//plot(hour2reg)
//plot(hl2, linewidth = 2, display = display.pane)


// [middle, upper, lower] = ta.kc(close, 5, 1)
// plot(middle, color=color.yellow)
// plot(upper, color=color.yellow)
// plot(lower, color=color.yellow)

