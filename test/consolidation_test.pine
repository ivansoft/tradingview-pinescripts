//@version=5
indicator("consolidation_test", overlay = true, max_lines_count = 500, max_bars_back = 100)

var int day2length = math.ceil(2*24*60*60 / timeframe.in_seconds())
var int day3length = math.ceil(3*24*60*60 / timeframe.in_seconds())
var int day4length = math.ceil(4*24*60*60 / timeframe.in_seconds())
var int day5length = math.ceil(5*24*60*60 / timeframe.in_seconds())
var int day7length = math.ceil(7*24*60*60 / timeframe.in_seconds())
var int hour1length = math.ceil(1*60*60 / timeframe.in_seconds())
var int hour2length = math.ceil(2*60*60 / timeframe.in_seconds())
var int hour4length = math.ceil(4*60*60 / timeframe.in_seconds())
var int hour5length = math.ceil(5*60*60 / timeframe.in_seconds())
var int min10length = math.ceil(10*60 / timeframe.in_seconds())
var int min15length = math.ceil(15*60 / timeframe.in_seconds())
var int min20length = math.ceil(20*60 / timeframe.in_seconds())
var int min30length = math.ceil(30*60 / timeframe.in_seconds())

body_atr(length) => ta.rma(math.abs(open - close), length)

// pre-calculated
prevatr = ta.atr(1)[1]
prevatrbody = body_atr(1)[1]
atr50d2 = ta.median(prevatr, day2length)
levelrange = atr50d2 / 4
//level_range = open * 0.01 * 0.50  // 0.5% of price
// log.info("{0}", atr50d2)

const int AVG_BODY_PRICE = 0
const int AVG_WICK_PRICE = 1

// const int HIGH_PRICE = 0
// const int LOW_PRICE = 0

type Anchor
    int start_index
    int length
    float avg
    //float arange
    array<Anchor> links  // reference to corrected anchors
    line line1  // only for UI
    line line2  // only for UI

avg(float source, int length) =>
    math.sum(source,nz(length,1))/nz(length,1)  // by default avg==source with length==1
avg_plot(float source, int length, bool cond) =>
    avg = avg(source, length)  // should be called on every bar
    cond ? avg : na

condition1(float highlow, float openclose) =>
    math.min(math.abs(openclose[1] - close),
     math.max(math.abs(highlow[1] - close),
              math.abs(openclose[2] - close))) <= levelrange
condition2(float highlow, float openclose) =>
    math.min(math.abs(openclose[1] - close),
             math.abs(highlow[1] - close)) <= levelrange

condition11(float highlow, float openclose) =>
    highlow[1] == openclose or highlow[2] == openclose

calcCondition(float highlow, float openclose) =>
    cond1 = condition1(highlow, openclose)
    //cond1 = condition2(highlow, openclose)
    cond11 = condition11(highlow, openclose)
    //...
    cond = cond1 or cond11
    condchange = ta.change(cond)
    // 0 1 2 3 4 5 index
    // 0 0 1 2 3 0 offset
    // 0 1 1 1 1 0 cond
    // 0 1 0 0 0 1 change
    offset = ta.barssince(condchange)  // offset -> [index=bar_index-(offset+1),lenght=offset+2]
    if condchange and not cond // eof
        [offset[1],false,true]
    else if cond
        [offset,true,false]
    else
        [na,false,false]

calcConditionAvg(float highlow, float openclose, simple int avgtype) =>
    [offset,cond,eof] = calcCondition(highlow, openclose)
    // if highlow == low
    //     if timestamp(2024,05,08,21,30)<=time and time<=timestamp(2024,05,08,21,36)
    //         log.info("{0}|{1} {2} [{3}] {4} {5} {6}", cond?1:0,eof?1:0, highlow==high?"hi":"lo", offset, t2, t)
    switch avgtype
        AVG_BODY_PRICE =>
            avg = avg(openclose,offset+2)
            avg1 = avg(openclose[1],offset+2)
            [eof?avg1:avg, offset+2, eof]
        AVG_WICK_PRICE =>
            avg = avg(highlow,offset+2)
            avg1 = avg(highlow[1],offset+2)
            [eof?avg1:avg, offset+2, eof]
        =>
            runtime.error("Unsupported AVG price type")
            [na,na,na]

// DEBUG only
//var line2 = line.new(na,na,na,na,color = color.gray)
drawLines(float price1, float price2, int x1, int x2, color fillColor) =>
    line line1 = na
    line line2 = na
    if (x2-x1 > 0)
        line1 := line.new(x1, price1, x2, price1)
        //line2 := line.new(x1, price2, x2, price2, color = color.gray)
        //line.set_x1(line2, x1), line.set_x2(line2, x2), line.set_y1(line2, price2), line.set_y2(line2, price2)
        //linefill.new(line1, line2, color.new(fillColor, 50))
    [line1,line2]
updateLines(line line1, line line2, float price1, float price2) =>
    line.set_y1(line1, price1)
    line.set_y2(line1, price1)
    line.set_y1(line2, price2)
    line.set_y2(line2, price2)


isSameLevelHistory(Anchor a0, Anchor a1, bool ishigh) => ishigh ?
     (a1.avg <= a0.avg and a0.avg <= a1.avg+levelrange) or (a1.avg <= a0.avg+levelrange and a0.avg+levelrange <= a1.avg+levelrange) :
     (a1.avg-levelrange <= a0.avg-levelrange and a0.avg-levelrange <= a1.avg) or (a1.avg-levelrange <= a0.avg and a0.avg <= a1.avg)
updateHistoryLines(Anchor a0, Anchor a1, bool ishigh) =>
    updateLines(a0.line1, a0.line2, a0.avg, a0.avg+(ishigh?levelrange:-levelrange)) // update line1.y line2.y
    updateLines(a1.line1, a1.line2, a1.avg, a1.avg+(ishigh?levelrange:-levelrange)) // update line1.y line2.y
updateHistoryLine(Anchor a0, bool ishigh) =>
    updateLines(a0.line1, a0.line2, a0.avg, a0.avg+(ishigh?levelrange:-levelrange))

correctHistory(array<Anchor> history, bool ishigh) =>
    corrected = false
    if history.size() >= 120 // max_lines_count 500/2/2=125
        history.pop()
    if history.size() > 10  // 11
        a0 = history.get(0)  // 0
        for i = 1 to 10 by 1
            a1 = history.get(i)  // 1-10
            samelevel = isSameLevelHistory(a0, a1, ishigh)
            if samelevel
                corrected := true
                newavg = (a1.avg*a1.length + a0.avg*a0.length) / (a1.length + a0.length)
                a0.avg := newavg
                a1.avg := newavg
                // update previously linked lines
                if not na(a0.links)
                    for a in a0.links
                        a.avg := newavg
                        updateHistoryLine(a, ishigh)
                if not na(a1.links)    
                    for a in a1.links
                        a.avg := newavg
                        updateHistoryLine(a, ishigh)
                // add new link
                if na(a0.links)
                    a0.links := array.new<Anchor>()
                a0.links.push(a1)
                updateHistoryLines(a0, a1, ishigh)
    corrected

[avghigh, lengthhigh, eofhigh] = calcConditionAvg(high, math.max(open,close), AVG_WICK_PRICE)
[avglow, lengthlow, eoflow] = calcConditionAvg(low, math.min(open,close), AVG_WICK_PRICE)

var historyhigh = array.new<Anchor>()
var historylow = array.new<Anchor>()

correctedhigh = false
correctedlow = false

if barstate.isconfirmed // curr is confirmed, but avg for prev
    if eofhigh
        startindexhigh = bar_index-lengthhigh  // bar_index[1]-offset
        [line1,line2] = drawLines(avghigh, avghigh+levelrange, startindexhigh, bar_index[1], color.red)
        historyhigh.unshift(Anchor.new(startindexhigh, lengthhigh, avghigh, na, line1, line2))
        // immediately make a correction (back history is limited by 10000 bars)
        // so, correct history continously on each bar
        //correctedhigh := correctHistory(historyhigh, true)
    if eoflow
        startindexlow = bar_index-lengthlow
        [line1,line2] = drawLines(avglow, avglow-levelrange, startindexlow, bar_index[1], color.green)
        historylow.unshift(Anchor.new(startindexlow, lengthlow, avglow, na, line1, line2))
        // immediately make a correction (back history is limited by 10000 bars)
        //correctedlow := correctHistory(historylow, false)


//plotchar(eofhigh, "eofhigh", "*", location.abovebar, size = size.tiny)
//plotchar(eoflow, "eoflow", "*", location.belowbar, size = size.tiny)
//plotchar(correctedhigh, "crh", "*", location.abovebar, size = size.tiny)
//plotchar(correctedlow, "crl", "*", location.belowbar, size = size.tiny)
