//@version=5
indicator("test", overlay = true, max_labels_count = 200, max_lines_count = 500)

// Logic
// 1. check current bar
//    *  

var daylength = switch
    timeframe.in_seconds() <= 5*60 => math.ceil(2*24*60*60 / timeframe.in_seconds())  // 5min - 2days
    timeframe.in_seconds() <= 2*60*60 => math.ceil(5*24*60*60 / timeframe.in_seconds())  // 2hrs - 5days
    timeframe.in_seconds() <= 1*24*60*60 => math.ceil(365*24*60*60/2 / timeframe.in_seconds())  // 1day - 180days
    timeframe.in_seconds() <= 7*24*60*60 => math.ceil(365*24*60*60/1.5 / timeframe.in_seconds())  // 7day - 243days
    timeframe.in_seconds() <= 31*24*60*60 => math.ceil(365*24*60*60 / timeframe.in_seconds())  // 31day - 365days
    => bar_index + 1  // all

bodyhigh = math.max(open,close)
bodylow = math.min(open,close)

pine_atr1() => na(high[1])? high-low : 
     math.max(math.max(high-low, math.abs(high-close[1])), math.abs(low-close[1]))
pine_atrbody1() => na(bodyhigh[1])? bodyhigh-bodylow : 
     math.max(math.max(bodyhigh-bodylow, math.abs(bodyhigh-close[1])), math.abs(bodylow-close[1]))

prevatr = ta.atr(1)[1]
prevatrbody = pine_atrbody1()[1]
atr50d = ta.median(prevatr, daylength)
atrb50d = ta.median(prevatrbody, daylength)
atrrange = atrb50d
atrrange2 = atrb50d/2
atrrange4 = atrb50d/4
atrrange8 = atrb50d/8

// NO BIWISE OPERATORS in PineScript, use PRIME NUMBERS and Modulo(%)
const int SAME_HIGHS = 2  // [0]
const int SAME_LOWS = 3
const int SAME_BODYHIGHS = 5
const int SAME_BODYLOWS = 7
const int SAME_BODYHIGH_HIGH = 11
const int SAME_BODYLOW_LOW = 13
const int SAME_HIGH_BODYHIGH = 17
const int SAME_LOW_BODYLOW = 19  // [7]
//const int SAME_BODYHIGH_BODYLOW = 23
//const int SAME_BODYLOW_BODYHIGH = 29  // [9]
var SAME_ARRAY = array.from(SAME_HIGHS, SAME_LOWS, SAME_BODYHIGHS, SAME_BODYLOWS, SAME_BODYHIGH_HIGH, SAME_BODYLOW_LOW, SAME_HIGH_BODYHIGH, SAME_LOW_BODYLOW) //, SAME_BODYHIGH_BODYLOW, SAME_BODYLOW_BODYHIGH)
var SAME_ARRAY_STR = array.from("HIGHS", "LOWS", "B-HIGHS-B", "B-LOWS-B", "B-HIGH", "B-LOW", "HIGH-B", "LOW-B") //, "B-HIGH_LOW-B", "B-LOW_HIGH-B")
format_same(int value) =>
    string result = ""
    for i = 0 to 7
        if value % array.get(SAME_ARRAY,i) == 0
            result := str.format("{0}\n{1}", result, array.get(SAME_ARRAY_STR,i))
    result
anycond(array<bool> condarray) =>
    result = 1
    for i = 0 to 7
        if array.get(condarray, i)
            result := result * array.get(SAME_ARRAY, i)
    result > 1 ? result : na

sameconds = array.from(
     math.abs(high[1]-high) <= atrrange4,  // <= 1/4 ATR
     math.abs(low[1]-low) <= atrrange4,
     math.abs(bodyhigh[1]-bodyhigh) <= atrrange8,  // // <= 1/8 ATR
     math.abs(bodylow[1]-bodylow) <= atrrange8,
     math.abs(bodyhigh[1]-high) <= atrrange4,
     math.abs(bodylow[1]-low) <= atrrange4,
     math.abs(high[1]-bodyhigh) <= atrrange4,
     math.abs(low[1]-bodylow) <= atrrange4,
     math.abs(bodyhigh[1]-bodylow) <= atrrange8,
     math.abs(bodylow[1]-bodyhigh) <= atrrange8
     )
anycond = anycond(sameconds)

plotchar(anycond, "tl", "*", location.belowbar, color.new(color.gray,0), size=size.tiny)
if not na(anycond)
    label.new(bar_index,na,str.format("{0}",format_same(anycond)),yloc=yloc.belowbar,color=color.gray,style=label.style_none,size=size.tiny)


calclevel(float source, int i, simple int id) => switch id
    0 => math.abs(low[i]-source) <= atrrange4
    1 => math.abs(high[i]-source) <= atrrange8
    2 => math.abs(bodylow[i]-source) <= atrrange8
    3 => math.abs(bodyhigh[i]-source) <= atrrange8
    => false

// detect levels
detectlevel(float source, simple int length) =>
    var linkedlevels = map.new<int,float>() // bar_index <=> calculated_avg
    var selected = array.new<int>()
    float avg = source
    float sum = avg
    int cnt = 1
    int prev_cnt = cnt
    for i = 1 to length-1
        prev_cnt := cnt
        if math.sign(bodyhigh[1]-atrrange8/2-avg) != math.sign(bodylow[1]+atrrange8/2-avg) // inside 1st bar body
            break
        if math.abs(low[i]-avg) <= atrrange4
            cnt += 1
            sum += low[i]
            avg := sum / cnt
        else if math.abs(high[i]-avg) <= atrrange8
            cnt += 1
            sum += high[i]
            avg := sum / cnt
        if math.abs(bodylow[i]-avg) <= atrrange8
            cnt += 1
            sum += bodylow[i]
            avg := sum / cnt
        else if math.abs(bodyhigh[i]-avg) <= atrrange8
            cnt += 1
            sum += bodyhigh[i]
            avg := sum / cnt
        if cnt > prev_cnt
            array.push(selected, bar_index-i)
    for sel in selected
        na
    cnt > 1 ? avg : na
levellow = detectlevel(low, 15)
levelbodylow = detectlevel(bodylow, 15)
p1 = plot(levellow, style=plot.style_steplinebr, display=display.pane)
p2 = plot(levelbodylow, style=plot.style_steplinebr, display=display.pane)
fill(p1, p2, color=color.new(color.green,75))





calcSlope(source, length) =>
    if barstate.isfirst or length <= 1
        [float(na), float(na), float(na)]
    else
        sumX = 0.0
        sumY = 0.0
        sumXSqr = 0.0
        sumXY = 0.0
        for i = 0 to length - 1 by 1
            val = source[i]
            per = i + 1.0
            sumX += per
            sumY += val
            sumXSqr += per * per
            sumXY += val * per
        slope = (length * sumXY - sumX * sumY) / (length * sumXSqr - sumX * sumX)
        average = sumY / length
        //intercept = average - slope * (sumX / length) // ?? + slope ??
        intercept = average - slope * math.floor(length / 2) + ((1 - (length % 2)) / 2) * slope
        endy = intercept  + slope * (length - 1)
        //intercept2 = (sumY * sumXSqr - sumX * sumXY) / (length * sumXSqr - sumX * sumX)
        [slope, intercept, endy]

const int linreg_length = 10
//--smalow = ta.sma(low, linreg_length)
linreglow11 = ta.linreg(low, linreg_length, 0)
linreglow22 = ta.linreg(low, linreg_length, linreg_length-1)
linreglow_slope = linreglow11 - ta.linreg(low, linreg_length, 1)
[slopelow, linreglow1, linreglow2] = calcSlope(low, linreg_length)
//--linreglow = interceptlow + slopelow * (linreg_length-1)
//--linreglow2 = interceptlow2 + slopelow * (linreg_length-1)
// plot(linreglow1, color=color.new(color.orange,50), display=display.pane, offset=0)
// plot(linreglow2, color=color.new(color.orange,80), display=display.pane, offset=-(linreg_length-1))
//--plot(linreglow2, color=color.new(color.orange,80), display=display.pane, offset=0)
// if -atrrange8 < linreglow_slope and linreglow_slope < atrrange8
//     line.new(bar_index-(linreg_length-1),linreglow22,bar_index,linreglow11,color=color.new(color.black,50))


type LevelAnchor
    float lprice


// text=str.format("{0}",ta.barssince(samebodylow))
//plotchar(samebodylow, "tl", "*", location.belowbar, color.gray, 0, "line", color.gray, false, size.tiny, na, display.pane)
